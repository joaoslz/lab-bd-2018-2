----------------------------------
-- CREATING DATABASE TRIGGERS
----------------------------------

-- PL/SQL BLOCKS ASSOCIATED WITH TABLES, VIEWS, DATABASE OR SCHEMA
-- EXECUTES WHENEVER A PROGRAMMED EVENT OCCURS
-- USE TO IMPLEMENT BUSINESS LOGIC: VERIFICATION, LOGGING, TRACE, INTEGRITY, ETC
-- TWO MAIN GROUPS:  DML TRIGGER AND DDL TRIGGERS. THERE IS ALSO SYSTEM TRIGGERS

-- 1) DML TRIGGERS

-- TIMING: BEFORE, AFTER (DEFAULT)
-- ALSO: INSTEAD OF TRIGGERS FOR VIEWS

-- EVENT: INSERT, UPDATE, DELETE

-- TYPE: ROW OR STATEMENT (DEFAULT)

-- WHEN CLAUSE: RESTRICT ROWS THAT FIRE THE TRIGGER 

-- FIRING SEQUENCE:

--  >> BEFORE STATEMENT <<
--  >> BEFORE ROW <<
--  >> AFTER ROW <<

--- >>>!!!CONSTRAINTS CHECK!!! <<<

--  >> AFTER STATEMENT <<


-- SYNTAX:

CREATE [OR REPLACE] TRIGGER <name>
{timing}  event1 | event2 ...
ON {table}
{trigger_body}


-- AUXILIARY TABLE:

CREATE TABLE TB_AUX
( 
    ID INT
   ,NAME VARCHAR2(100)
)

SELECT * FROM TB_AUX;

-- EXAMPLE 1: BEFORE-STATEMENT TRIGGER

CREATE OR REPLACE TRIGGER BEF_STA
BEFORE INSERT ON TB_AUX
BEGIN

  DBMS_OUTPUT.PUT_LINE('Inside a BEFORE STATEMENT TRIGGER!');  
  
  -- USE THE FOLLOWING LINE  TO CANCEL THE ACTION
  --  RAISE_APPLICATION_ERROR(-20200,'TEST');

END;

-- TESTING

INSERT INTO TB_AUX VALUES(1,'A')
INSERT INTO TB_AUX VALUES(2,'B')
INSERT INTO TB_AUX VALUES(3,'C')

SELECT * FROM TB_AUX;

DROP TRIGGER BEF_STA

-- EXAMPLE 2: BEFORE-ROW TRIGGER

CREATE OR REPLACE TRIGGER BEF_ROW
BEFORE UPDATE OF NAME ON TB_AUX
FOR EACH ROW
BEGIN

  DBMS_OUTPUT.PUT_LINE('Inside a BEFORE ROW TRIGGER!');  

END;

-- TESTING
UPDATE TB_AUX
SET NAME = ''
WHERE ID = 100;

UPDATE TB_AUX
SET ID = 0;

UPDATE TB_AUX
SET NAME = '';

SELECT * FROM TB_AUX;

DROP TRIGGER BEF_ROW;

-- EXAMPLE 3: AFTER-STATEMENT TRIGGER AND USING PREDICATES
CREATE OR REPLACE TRIGGER AFT_STA
AFTER INSERT OR UPDATE OR DELETE ON TB_AUX
BEGIN

  IF DELETING THEN
    RAISE_APPLICATION_ERROR(-20200,'DELETE CANCELED!'); 
  ELSIF INSERTING THEN
    RAISE_APPLICATION_ERROR(-20200,'INSERT CANCELED!'); 
  ELSIF UPDATING('NAME') THEN
    RAISE_APPLICATION_ERROR(-20200,'UPDATE CANCELED!'); 
  END IF;

END;

-- TESTING
SELECT * FROM TB_AUX;

DELETE TB_AUX WHERE ID = 0

INSERT INTO TB_AUX VALUES(4,'D')

UPDATE TB_AUX 
SET NAME = 'Z'

DROP TRIGGER AFT_STA;

-- EXAMPLE 4: AFTER-ROW TRIGGER AND THE NEW AND OLD QUALIFIERS

CREATE OR REPLACE TRIGGER AFT_ROW
AFTER INSERT OR UPDATE OR DELETE ON TB_AUX
FOR EACH ROW
BEGIN

  IF DELETING THEN
    DBMS_OUTPUT.PUT_LINE('OLD ID:' || TO_CHAR(:OLD.ID) );  
    DBMS_OUTPUT.PUT_LINE('OLD NAME:' || TO_CHAR(:OLD.NAME) );  
  
  ELSIF INSERTING THEN
    DBMS_OUTPUT.PUT_LINE('NEW ID:' || TO_CHAR(:NEW.ID) );  
    DBMS_OUTPUT.PUT_LINE('NEW NAME:' || TO_CHAR(:NEW.NAME) );  
  
  ELSIF UPDATING('NAME') THEN
  
    DBMS_OUTPUT.PUT_LINE('NEW ID:' || TO_CHAR(:NEW.ID) );  
    DBMS_OUTPUT.PUT_LINE('OLD ID:' || TO_CHAR(:OLD.ID) );  
    
    DBMS_OUTPUT.PUT_LINE('NEW NAME:' || TO_CHAR(:NEW.NAME) );  
    DBMS_OUTPUT.PUT_LINE('OLD NAME:' || TO_CHAR(:OLD.NAME) );  

  END IF;

END;

-- TESTING

SELECT * FROM TB_AUX;

DELETE TB_AUX WHERE ID = 0

INSERT INTO TB_AUX VALUES(4,'D')

UPDATE TB_AUX 
SET NAME = 'Z'

DROP TRIGGER AFT_ROW;

-- EXAMPLE 5: WHEN CLAUSE

CREATE OR REPLACE TRIGGER AFT_WHEN
AFTER INSERT ON TB_AUX
FOR EACH ROW WHEN (NEW.ID = 10)
BEGIN
  DBMS_OUTPUT.PUT_LINE('FIRING THE TRIGGER ONLY WHEN THE NEW ID = 10!');  
END;

-- TESTING
SELECT * FROM TB_AUX;

INSERT INTO TB_AUX VALUES(9,'M');

INSERT INTO TB_AUX VALUES(10,'N');

DROP TRIGGER AFT_WHEN

-- EXAMPLE 6: INSTEAD OF TRIGGERS

CREATE VIEW VW_AUX
AS 
SELECT *
FROM TB_AUX;

CREATE OR REPLACE TRIGGER TR_IO
INSTEAD OF INSERT ON VW_AUX
FOR EACH ROW
BEGIN
   INSERT INTO TB_AUX VALUES(:NEW.ID, :NEW.NAME);
END;

-- TESTING

SELECT * FROM VW_AUX;
SELECT * FROM TB_AUX;

INSERT INTO VW_AUX VALUES(99,'W');

DROP TRIGGER TR_IO;

DROP VIEW VW_AUX;

DROP TABLE TB_AUX;

-- 2) DDL TRIGGERS


-- FIRES THE TRIGGER FOR SPECIFIC DDL USER ACTIONS

-- SYNTAX:

CREATE [OR REPLACE] TRIGGER <name>
{timming}  [ddl_event1, ddl_event2...]
ON {database | schema }
{trigger_body}

-- EXAMPLE 1: CREATE A TRIGGER FOR A DDL STATEMENT

CREATE OR REPLACE TRIGGER TRIG_CREATE
AFTER CREATE ON DATABASE
BEGIN
    DBMS_OUTPUT.PUT_LINE('Someone used the CREATE command!');  
END;

CREATE TABLE T_X
(
      F1 INT
)

DROP TABLE T_X

DROP TRIGGER TRIG_CREATE
